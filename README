libjson2c: a library for parsing JSON tokenized by jsmn into a C data structure
based on a grammar defined in the user program

Summary of a typical use:

First, the user program manages the lexical analysis and tokenization, feeding
a string of JSON and empty tokens to JSMN.

Next, the tokens are parsed in cooperation with libjson2c. The source JSON
string and (now populated) array of tokens are provided to parse_tokens along
with a grammar (an instance of conf_schema or tree of linked schemas
containing aptly initialized conf_element's representing the desired syntax
for the input and the destination and handling of the output).

When parse_tokens finds a key matching an element in the schema it dispatches
the next token (the value) to install_val along with the matching conf_element.

When install_val gets a leaf element (e.g. LEAF_INT, LEAF_STRING, or friends)
it installs the value at the location pointed to by the val_p.

When a NODE_SCHEMA is found (usually indicating a value of array or object
type), install_val calls parse_tokens to parse with the schema provided in
val_p.

When a NODE_FN is found, the value is provided to the function pointed to by
fn_p, which can then do as it wishes, returning to install_val (and then
parse_tokens) when it's done. This option might be used when structures need to
be dynamically allocated to hold the data, and handily, parse_tokens can be
called with a conf_schema having elements pointing to the new locations in which
to install values. It may not be possible to have parse_tokens (via install_val)
install the values in their final locations in a data structure, e.g. in the
case that the locations can not be pointed to directly and must be accessed via
special accessor functions, or in the case that the values require special
processing into a non-standard type before being installed. In such cases,
addresses of temporary variables may be provided as the val_p's in calls to
parse_tokens with the user helper-function doing the extra work for storage.
Alternatively, install_val's conversion from JSON and jsmn token to C data
type might be handled completely by the client program called in the case of a
conf_elem with val_type NODE_FN.


Guidelines for interoperating user functions:

A function in the user program to be used in cooperation with the parser by
being pointed to in conf_element's of type NODE_FN should have the following
behavior:

It takes two arguments, a string of JSON and a pointer to const jsmntok_t.
It returns a pointer to const jsmntok_t or NULL on error.  On success, it should
return a pointer to the next token to be processed by the calling procedure.

This convention is followed by library function parse_tokens.
